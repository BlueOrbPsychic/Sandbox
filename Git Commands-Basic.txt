# Collection of git commands

# Go to Source Control View "Ctrl + Shift + G"


S """
# Initial Setup
1. Initialize a new Git repository:
    git init

2. Clone an existing repository:
    git clone <repository-url>

# Basic Workflow
3. Check the status of your working directory:
    git status

4. Add files to the staging area:
    git add <file>  # Add a specific file
    git add .       # Add all files in the current directory

5. Commit changes with a message:
    git commit -m "Your commit message"

# Branch Management
6. List all branches:
    git branch

7. Create a new branch:
    git branch <branch-name>

8. Switch to a different branch:
    git checkout <branch-name>

9. Create and switch to a new branch:
    git checkout -b <branch-name>

10. Delete a branch:
    git branch -d <branch-name>  # Delete a branch that has been merged
    git branch -D <branch-name>  # Force delete a branch

# Pushing and Pulling
11. Set up a remote repository:
    git remote add origin <repository-url>

12. Push changes to a remote repository:
    git push -u origin <branch-name>  # First time push with -u to set upstream
    git push                          # Subsequent pushes

13. Pull changes from a remote repository:
    git pull

# Merging and Rebasing
14. Merge a branch into the current branch:
    git merge <branch-name>

15. Rebase the current branch onto another branch:
    git rebase <branch-name>




"""

additional_git_commands = """
# Viewing History
1. View commit history:
    git log

2. View commit history with a graph:
    git log --graph --oneline --all

3. View changes made in a specific commit:
    git show <commit-hash>

# Stashing Changes
4. Stash your changes:
    git stash

5. List stashes:
    git stash list

6. Apply the latest stash:
    git stash apply

7. Apply a specific stash:
    git stash apply stash@{n}

8. Drop a specific stash:
    git stash drop stash@{n}

# Undoing Changes
9. Unstage a file:
    git reset HEAD <file>

10. Revert changes in a file:
    git checkout -- <file>

11. Reset to a previous commit (destructive):
    git reset --hard <commit-hash>

# Ignoring Files
12. Create a .gitignore file:
    # Add patterns of files or directories to be ignored by Git
    # Ignore all .log files
    *.log
    
    # Ignore the node_modules directory
    node_modules/

# Tagging
13. Create a new tag:
    git tag <tag-name>

14. Push a specific tag:
    git push origin <tag-name>

# Aliases
15. Create useful Git aliases to save time:
    git config --global alias.st status
    git config --global alias.co checkout
    git config --global alias.ci commit
    git config --global alias.br branch

# Combining Commands
16. Clone a repository and checkout a specific branch:
    git clone -b <branch-name> <repository-url>

# Checking Differences
17. Check differences between working directory and staging area:
    git diff

18. Check differences between staging area and the last commit:
    git diff --cached
"""


